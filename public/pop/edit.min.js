(function (c, f, e) {
    var b = "editor";
    var d = {
        text: "",
        textInput: null,
        familys: [{
            "name": "硬笔行书",
            "value": "A"
        }, {
            "name": "毡笔黑",
            "value": "B"
        }, {
            "name": "娃娃篆",
            "value": "C"
        }, {
            "name": "微软雅黑",
            "value": "微软雅黑"
        }, {
            "name": "方正黑体",
            "value": "方正黑体"
        }],
        family: "",
        color: "",
        fontSize: 40,
        offsets: [{
            "value": "0&deg;",
            "name": "0"
        }, {
            "value": "45&deg;",
            "name": "45"
        }, {
            "value": "90&deg;",
            "name": "90"
        }, {
            "value": "135&deg;",
            "name": "135"
        }, {
            "value": "180&deg;",
            "name": "180"
        }, {
            "value": "225&deg;",
            "name": "225"
        }, {
            "value": "270&deg;",
            "name": "270"
        }, {
            "value": "315&deg;",
            "name": "315"
        }, {
            "value": "360&deg;",
            "name": "360"
        }],
        offset: "",
        offsetH: "",
        bold: "normal",
        style: "normal",
        underline: "none",
        gradualHF: 0,
        gradualHE: 0,
        opacity: 1,
        animals: [{
            "value": "bounceInUp",
            "name": "跳跃"
        }, {
            "value": "swing",
            "name": "晃动"
        }, {
            "value": "lightSpeedIn",
            "name": "快速"
        }, {
            "value": "flip",
            "name": "空翻"
        }, {
            "value": "rotateIn",
            "name": "旋转"
        }, {
            "value": "rollIn",
            "name": "翻滚"
        }],
        animal: "bounceInUp",
        url: "",
        id: "",
        uuid: "",
        type: "0",
        time: "",
        callback: null
    };
    //默认样式
    var def = {
        color: "ffffff",
        offset:"0",
        offsetH: 0,
        family : "微软雅黑",
        style : "",
        fontSize : 40,
        gradualHF: 0,
        gradualHE: 0,
        opacity : 275,
        animal: "bounceInUp",
        bold: "",
        underline :"",
    };

    function a(h, g) {
        this.element = h;
        this.settings = c.extend({}, d, g);
        this.name = b;
        this.animal = "bounceInUp";
        this.family = "";
        this.bold = "normal";
        this.underline = "none";
        this.style = "normal";
        this.color = "fff";
        this.fSize = "40";
        this.offset = "0";
        this.opacity = 1;
        this.offsetH = 0;
        this.gradualHF = 0;
        this.gradualHE = 0;
        this.offX = 0;
        this.offY = 0;
        this.count = 2;
        this.R = 0;
        this.G = 0;
        this.B = 0;
        this.sub = 0;
        this.def = def;
        this.init()
    }
    a.prototype = {
        init: function () {
            this.create();
            this.binds();
            this.reCreateShadow()
        }, initBg: function () {
            this.reAnimal()
        }, initLdiv: function () {
            var l = this;
            var o = "";
            var k = "";
            for (var g = 0; g < this.settings.familys.length; g++) {
                var j = this.settings.familys[g];
                o += "<li value='" + j.value + "'>" + j.name + "</li>";
                if (this.settings.family == j.value) {
                    k = j.name
                }
            }
            c("#" + l.settings.id + " .l-select").find(".ldw-96").append(o);
            c("#" + l.settings.id + " .ldw-96").find("input[readonly]").val(k);
            l.family = this.settings.family;
            l.setFamily(l.family);
            this.reChecked(false);
            this.reCheck();
            var h = l.settings.id + "1";
            c("#" + l.settings.id + " .l-color").colpick({
                flat: false,
                submit: 1,
                color: this.settings.color,
                id: h
            });
            this.color = this.settings.color;
            this.setColor();
            this.reColor();
            o = "";
            var n = "";
            for (var g = 0; g < this.settings.offsets.length; g++) {
                var m = this.settings.offsets[g];
                o += "<li value='" + m.name + "'>" + m.value + "</li>"
            }
            c("#" + l.settings.id + " .l-select").find(".ldw-69").append(o);
            c("#" + l.settings.id + " .l-select").find(".ldw-69").find("li").each(function () {
                if (c(this).attr("value") == l.settings.offset) {
                    n = c(this).text()
                }
            });
            c("#" + l.settings.id + " .ldw-69").find("input[readonly]").val(n);
            this.offset = this.settings.offset;
            this.reOffset()
        }, initLbm: function () {
            var k = this;
            c("#" + k.settings.id + " #fontSize").val(this.settings.fontSize);
            var h = this.unReFontSize("fontSize", this.settings.fontSize);
            this.reFSize(h);
            c("#" + k.settings.id + " #offsetH").val(this.settings.offsetH);
            this.setSlip("offsetH", this.settings.offsetH);
            this.offsetH = this.settings.offsetH;
            this.reOffset();
            c("#" + k.settings.id + " #gradualHF").val(this.settings.gradualHF);
            c("#" + k.settings.id + " #gradualHE").val(this.settings.gradualHE);
            this.reGradualHF(this.settings.gradualHF);
            this.reGradualHE(this.settings.gradualHE);
            c("#" + k.settings.id + " #gradualHF").parent().find(".i-00").css("left", this.settings.gradualHE + "px");
            c("#" + k.settings.id + " #gradualHF").parent().find(".i-01").css("left", this.settings.gradualHF + "px");
            c("#" + k.settings.id + " #gradualHF").parent().find("span").css("left", this.settings.gradualHE + "px");
            var j = this.settings.gradualHF - this.settings.gradualHE + 3;
            c("#" + k.settings.id + " #gradualHF").parent().find("span").css("width", j + "px");
            c("#" + k.settings.id + " #opacity").val(this.settings.opacity);

            var o = (new Number(this.settings.opacity)).valueOf();
            this.setSlip("opacity", o * 275);
            this.reOpacity( o * 275);
            var n = "";
            var l = "";
            for (var g = 0; g < this.settings.animals.length; g++) {
                var m = this.settings.animals[g];
                n += "<li value='" + m.value + "'>" + m.name + "</li>";
                if (m.value == this.settings.animal) {
                    l = m.name;
                    this.animal = m.value
                }
            }
            c("#" + k.settings.id + " .l-select").find(".ldw-332").append(n);
            c("#" + k.settings.id + " .ldw-332").find("input[readonly]").val(l);
            this.reAnimal()
        }, rgb: function () {
            this.R = this.convert(this.color[0], true);
            this.R += this.convert(this.color[1], false);
            this.G = this.convert(this.color[2], true);
            this.G += this.convert(this.color[3], false);
            this.B = this.convert(this.color[4], true);
            this.B += this.convert(this.color[5], false)
        }, convert: function (h, g) {
            var i = 0;
            var j = 1;
            if (g) {
                j = 15
            }
            switch (h) {
                case "F":
                case "f":
                    i = 15 * j;
                    break;
                case "E":
                case "e":
                    i = 14 * j;
                    break;
                case "D":
                case "d":
                    i = 14 * j;
                    break;
                case "C":
                case "c":
                    i = 14 * j;
                    break;
                case "B":
                case "b":
                    i = 14 * j;
                    break;
                case "A":
                case "a":
                    i = 14 * j;
                    break;
                default:
                    var k = new Number(h);
                    i = k.valueOf() * j;
                    break
            }
            return i
        }, setSlip: function (j, g) {
            var i = this;
            var h = (new Number(g)).valueOf() + 3;
            c("#" + i.settings.id + " #" + j).prev().css("width", h + "px");
            c("#" + i.settings.id + " #" + j).prev().prev().css("left", g + "px")
        }, setColor: function () {
            var g = this;
            c("#" + g.settings.id + " .l-color").css("background-color", "#" + this.color);
            this.reColor()
        }, setFamily: function (g) {
            var h = this;
            this.family = g;
            c("#" + h.settings.id + " .cropper-bg").css("font-family", this.family)
        }, reCount: function () {
            var h = 275 / 21;
            var g = Math.floor(this.offsetH / h);
            this.count = g;
            if (this.count < 2) {
                this.count = 2
            }
        }, reSub: function () {
            this.reCount();
            this.rgb();
            if (this.count == 2) {
                this.sub = 0;
                return
            }
            var g = Math.min(this.R, this.G);
            g = Math.min(g, this.B);
            this.sub = Math.floor(g / this.count);
            var h = 322 / g;
            this.sub += Math.floor(this.gradualHF / h);
            h = 322 / 255;
            this.sub -= Math.floor(this.gradualHE / h)
        }, reCreateShadow: function () {
            var n = this;
            this.reSub();
            var o = "";
            for (var k = 0; k < this.count; k++) {
                var m = this.R - this.sub * k;
                var l = this.G - this.sub * k;
                var h = this.B - this.sub * k;
                o += (k * this.offX) + "px " + (k * this.offY) + "px " + 0 + " rgb(" + m + "," + l + "," + l + "),"
            }
            var j = this.count;
            o += (j * this.offX) + "px " + (j * this.offY) + "px " + (j - 1) + "px rgba(0,0,0," + this.opacity + "),";
            o += (j * this.offX) + "px " + (j * this.offY) + "px " + 1 + "px rgba(0,0,0,0.5)";
            c("#" + n.settings.id + " .cropper-bg").css("text-shadow", o)
        }, createShadow: function () {
            var k = this;
            var g = this.offsetH;
            var l = "";
            var h = 0;
            for (var j = g; j >= 0; j -= 20) {
                l += (h * this.offX) + "px " + (h * this.offY) + "px " + 0 + " rgb(" + j + "," + j + "," + j + "),";
                h++
            }
            l += (h * this.offX) + "px " + (h * this.offY) + "px " + (h - 1) + "px rgba(0,0,0," + this.opacity + "),";
            l += (h * this.offX) + "px " + (h * this.offY) + "px " + 1 + "px rgba(0,0,0,0.5)";
            c("#" + k.settings.id + " .cropper-bg").css("text-shadow", l)
        }, reColor: function () {
            var g = this;
            c("#" + g.settings.id + " .cropper-bg").css("color", "#" + this.color);
            this.reCreateShadow()
        }, reFSize: function (g) {
            var h = this;
            var i = 275 / 100;
            var j = Math.floor(g / i);
            if (j <= 0) {
                j = 1
            }
            h.fSize = j;
            c("#" + h.settings.id + " .cropper-bg").css("font-size", h.fSize + "px")
        }, reOpacity: function (g) {
            var h = 275 / 100;
            var i = g / h;
            i = 0.01 * i;
            if (i < 0) {
                i = 0
            }
            i = i.toFixed(2);
            this.opacity = i
        }, reGradualHF: function (g) {
            var h = 275 / 255;
            var i = g / h;
            i = Math.floor(i);
            this.gradualHF = i
        }, reGradualHE: function (g) {
            var h = 275 / 255;
            var i = g / h;
            i = Math.floor(i);
            this.gradualHE = i
        }, reChecked: function (reset) {

            if(!reset){
                if (this.settings.bold == "checked") {
                    c( "#"+this.settings.id+" #bold").attr("checked", "checked")
                }
                if (this.settings.style == "checked") {
                    c("#"+this.settings.id+ " #incline").attr("checked", "checked")
                }
                if (this.settings.underline == "checked") {
                    c("#"+this.settings.id+ " #underline").attr("checked", "checked")
                }
            }else {
                if (this.def.bold == "checked") {
                    c( "#"+this.settings.id+" #bold").attr("checked", "checked")
                }else {c( "#"+this.settings.id+" #bold").removeAttr("checked")}
                if (this.def.style == "checked") {
                    c("#"+this.settings.id+ " #incline").attr("checked", "checked")
                }else {c( "#"+this.settings.id+" #incline").removeAttr("checked")}
                if (this.def.underline == "checked") {
                    c("#"+this.settings.id+ " #underline").attr("checked", "checked")
                }else {c( "#"+this.settings.id+" #underline").removeAttr("checked")}
            }

        }, reset: function () {
            var n = this;
            this.animal = this.def.animal;
            this.bold = this.def.bold;
            this.color = this.def.color;
            this.offsetH = this.def.offsetH;
            this.style = this.def.style;
            this.underline = this.def.underline;
            this.offset = this.def.offset;
            this.reChecked(true);
            this.reCheck();
            this.setFamily(this.def.family);
            this.setColor();
            this.reColor();
            this.reOpacity(this.def.opacity);
            c("#" + n.settings.id + " #gradualHF").val(this.def.gradualHF);
            c("#" + n.settings.id + " #gradualHE").val(this.def.gradualHE);
            this.reGradualHF(this.def.gradualHF);
            this.reGradualHE(this.def.gradualHE);
            c("#" + n.settings.id + " #gradualHF").parent().find(".i-00").css("left", this.def.gradualHE + "px");
            c("#" + n.settings.id + " #gradualHF").parent().find(".i-01").css("left", this.def.gradualHF + "px");
            c("#" + n.settings.id + " #gradualHF").parent().find("span").css("left", this.def.gradualHE + "px");
            var l = this.def.gradualHF - this.def.gradualHE + 3;
            c("#" + n.settings.id + " #gradualHF").parent().find("span").css("width", l + "px");
            c("#" + n.settings.id + " #opacity").val(this.def.opacity);
            console.log("======>"+this.def.opacity,this.opacity);
            this.setSlip("opacity", this.def.opacity);
            c("#" + n.settings.id + " #offsetH").val(this.def.offsetH);
            this.setSlip("offsetH", this.def.offsetH);
            this.reOffset();
            c("#" + n.settings.id + " #fontSize").val(this.def.fontSize);
            var j = this.unReFontSize("fontSize", this.def.fontSize);

            this.reFSize(j);
            for (var h = 0; h < this.settings.familys.length; h++) {
                var m = this.settings.familys[h];
                if (m.value == this.family) {
                    c("#" + n.settings.id + " #family").val(m.name);
                    break
                }
            }
            var o = "";
            c("#" + n.settings.id + " .l-select").find(".ldw-69").find("li").each(function () {
                if (c(this).attr("value") == n.def.offset) {
                    o = c(this).text()
                }
            });
            c("#" + n.settings.id + " #offset").parent().find("input[readonly]").val(o);
            for (var h = 0; h < this.settings.animals.length; h++) {
                var g = this.settings.animals[h];
                if (g.value == this.animal) {
                    c("#" + n.settings.id + " #animal").val(g.name);
                    break
                }
            }
            c("#" + n.settings.id + "1 #collorpicker_103").remove();
            var k = n.settings.id + "1";
            c("#" + n.settings.id + " .l-color").colpick({
                flat: false,
                submit: 1,
                color: this.def.color,
                id: k
            });
            this.reAnimal()
        }, reAnimal: function () {
            var g = this;
            c("#" + g.settings.id + " .cropper-bg").find("p").remove();
            var h = "<p>" + this.settings.text + "</>";
            c("#" + g.settings.id + " .cropper-bg").append(h);
            c("#" + g.settings.id + " .cropper-bg").find("p").addClass("animated");
            c("#" + g.settings.id + " .cropper-bg").find("p").addClass(this.animal);
            setTimeout(function () {
                c("#" + g.settings.id + " .cropper-bg").find("p").removeClass()
            }, 1500)
        }, reCheck: function () {
            var g = this;
            if (c("#" + g.settings.id + " #bold").attr("checked") != undefined) {
                c("#" + g.settings.id + " .cropper-bg").css("font-weight", "bold");
                this.bold = "checked"
            } else {
                c("#" + g.settings.id + " .cropper-bg").css("font-weight", "normal");
                this.bold = ""
            } if (c("#" + g.settings.id + " #incline").attr("checked") != undefined) {
                c("#" + g.settings.id + " .cropper-bg").css("font-style", "oblique");
                this.style = "checked"
            } else {
                c("#" + g.settings.id + " .cropper-bg").css("font-style", "normal");
                this.style = ""
            } if (c("#" + g.settings.id + " #underline").attr("checked") != undefined) {
                c("#" + g.settings.id + " .cropper-bg").css("text-decoration", "underline");
                this.underline = "checked"
            } else {
                c("#" + g.settings.id + " .cropper-bg").css("text-decoration", "none");
                this.underline = ""
            }
        }, reOffset: function () {
            var g = this.offset;
            switch (g) {
                case "0":
                    this.offX = 1;
                    this.offY = 0;
                    break;
                case "45":
                    this.offX = 1;
                    this.offY = -1;
                    break;
                case "90":
                    this.offX = 0;
                    this.offY = -1;
                    break;
                case "135":
                    this.offX = -1;
                    this.offY = -1;
                    break;
                case "180":
                    this.offX = -1;
                    this.offY = 0;
                    break;
                case "225":
                    this.offX = -1;
                    this.offY = 1;
                    break;
                case "270":
                    this.offX = 0;
                    this.offY = 1;
                    break;
                case "315":
                    this.offX = 1;
                    this.offY = 1;
                    break;
                case "360":
                    this.offX = 1;
                    this.offY = 0;
                    break;
                default:
                    this.offX = 1;
                    this.offY = 0;
                    break
            }
        }, unReFontSize: function (j, g) {
            var i = this;
            var h = Math.floor(g * 275 / 100);
            this.fSize = g;
            c("#" + i.settings.id + " #" + j).prev().css("width", h + 3 + "px");
            c("#" + i.settings.id + " #" + j).prev().prev().css("left", h + "px");
            return h
        }, create: function () {
            var g = "<div id='" + this.settings.id + "' class='l-pop'><i></i><span></span>";
            g += "<div class='pop-con'>";
            g += this.createBg();
            g += this.createLdiv();
            g += this.createLbm();
            g += "</div></div>";
            c(this.element).after(g);
            this.initBg();
            this.initLdiv();
            this.initLbm()
        }, binds: function () {
            var g = this;

            //textInpu文本输入框
            if(g.settings.textInput){
                $(g.settings.textInput).on('blur', function(){
                    var text = $(this).val();
                    if(text){
                        $("#"+g.settings.id+" .cropper-bg").find('p').text(text);
                        g.settings.text = text;
                    }
                });
            }
            c("#" + g.settings.id + " .l-font ul li").each(function () {
                c(this).find("i").on("click", function (h) {
                    if (c(this).prev().attr("checked") != undefined) {
                        c(this).prev().removeAttr("checked")
                    } else {
                        c(this).prev().attr("checked", "checked")
                    }
                    g.reCheck();
                    h.stopPropagation();
                })
            });
            c("#" + g.settings.id + " .l-select").each(function () {
                c(this).on("click", function (i) {
                    if (c(this).parent().find("ul[class=ldw-96],ul[class=ldw-69],ul[class=ldw-332]").css("display") == "none") {
                        c(this).parent().find("ul[class=ldw-96],ul[class=ldw-69],ul[class=ldw-332]").slideDown()
                    } else {
                        c(this).parent().find("ul[class=ldw-96],ul[class=ldw-69],ul[class=ldw-332]").slideUp()
                    }
                    var h = this;
                    c("#" + g.settings.id + " .l-select").each(function () {
                        if (this != h) {
                            c(this).find("ul[class=ldw-96],ul[class=ldw-69],ul[class=ldw-332]").slideUp()
                        }
                    });
                    i.stopPropagation()
                });
                c(this).find("ul").find("li").on("click", function (ii) {
                    var h = c(this).attr("value");
                    var i = c(this).text();
                    if (c(this).parent().parent().find("input[type=hidden]").length > 0) {
                        c(this).parent().parent().find("input[type=hidden]").val(h);
                        c(this).parent().parent().find("input[readonly]").val(i);
                        if (c(this).parent().parent().find("input[type=hidden]").attr("id") == "offset") {
                            g.offset = h;
                            g.reOffset();
                            g.reCreateShadow()
                        } else {
                            if (c(this).parent().parent().find("input[readonly]").attr("id") == "animal") {
                                g.animal = h;
                                g.reAnimal()
                            }
                        }
                    } else {
                        if (c(this).parent().parent().find("input[readonly]").attr("id") == "family") {
                            c(this).parent().parent().find("input[readonly]").val(i);
                            g.family = h;
                            g.setFamily(h)
                        } else {
                            c(this).parent().parent().find("input[readonly]").val(h)
                        }
                    }
                    c(this).parent().slideUp();
                    ii.stopPropagation();
                })
            });
            c("#" + g.settings.id + " .l-slip").each(function () {
                c(this).find("i").on("click", function (h) {
                    h.stopPropagation()
                });
                c(this).on("click", function (i) {
                    var h = i.offsetX - 4;
                    c(this).find("i").css("left", h + "px");
                    c(this).find("input[type=hidden]").val(h);
                    c(this).find("span").css("width", h + 3 + "px");
                    if (c(this).find("input[type=hidden]").attr("id") == "offsetH") {
                        g.offsetH = h
                    } else {
                        if (c(this).find("input[type=hidden]").attr("id") == "opacity") {
                            g.reOpacity(h)
                        } else {
                            if (c(this).find("input[type=hidden]").attr("id") == "fontSize") {
                                g.reFSize(h)
                            }
                        }
                    }
                    g.reCreateShadow();
                    i.stopPropagation();
                })
            });
            c("#" + g.settings.id + " .l-slip-0").each(function () {
                c(this).find("i").on("click", function (h) {
                    h.stopPropagation()
                });
                c(this).find("span").on("click", function (p) {
                    var h = p.offsetX - 4;
                    var i = g.sbustr(c(this).css("left")) + h;
                    var m = c(this).parent().find(".i-00").css("left");
                    var k = c(this).parent().find(".i-01").css("left");
                    var o = g.sbustr(m);
                    var n = g.sbustr(k);
                    var q = n - i;
                    var r = i - o;
                    var s = 0;
                    var j = 0;
                    if (q < r) {
                        c(this).parent().find(".i-01").css("left", i + "px");
                        s = i - o + 3;
                        c(this).css("width", s + "px");
                        g.reGradualHF(i)
                    } else {
                        c(this).parent().find(".i-00").css("left", i + "px");
                        s = n - i + 3;
                        c(this).css("width", s + "px");
                        c(this).css("left", i + "px");
                        g.reGradualHE(i)
                    }
                    g.reCreateShadow();
                    p.stopPropagation()
                });
                c(this).on("click", function (o) {
                    var h = o.offsetX - 4;
                    var l = c(this).find(".i-00").css("left");
                    var k = c(this).find(".i-01").css("left");
                    var n = g.sbustr(l);
                    var m = g.sbustr(k);
                    if (h > m) {
                        c(this).find(".i-01").css("left", h + "px");
                        g.reGradualHF(h)
                    } else {
                        if (h < n) {
                            c(this).find(".i-00").css("left", h + "px");
                            g.reGradualHE(h)
                        } else {
                            var i = m - h;
                            var j = h - n;
                            if (i <= j) {
                                c(this).find(".i-01").css("left", h + "px");
                                g.reGradualHF(h)
                            } else {
                                c(this).find(".i-00").css("left", h + "px");
                                g.reGradualHE(h)
                            }
                        }
                    }
                    l = c(this).find(".i-00").css("left");
                    k = c(this).find(".i-01").css("left");
                    n = g.sbustr(l);
                    m = g.sbustr(k);
                    var p = m - n;
                    c(this).find("span").css("left", l);
                    c(this).find("span").css("width", (p + 3) + "px");
                    g.reCreateShadow();
                    o.stopPropagation();
                })
            });
            c("#" + g.settings.id + " #reset").on("click", function (h) {
                g.reset();
                h.stopPropagation();
            });
            c("#" + g.settings.id + "1 .colpick_color_overlay2").on("click", function (i) {
                var h = c("#" + g.settings.id + "1 #colorValue").val();
                g.color = h;
                g.setColor();
                i.stopPropagation();
            });
            c("#" + g.settings.id + "1 .colpick_hue_arrs").on("mousedown", function () {
                c(this).on("mousemove", function () {
                    var h = c("#" + g.settings.id + "1 #colorValue").val();
                    g.color = h;
                    g.setColor()
                }).on("mouseup", function () {
                    c(this).off("mousedown")
                })
            });
            c("#" + g.settings.id + " .l-save").on("click", function (ii) {
                var o = g.color;
                var p = g.offset;
                var l = g.offsetH;
                var s = g.family;
                var x = g.fSize;
                var n = g.gradualHF;
                var q = g.gradualHE;
                var u = g.opacity;
                var j = g.animal;
                var v = g.bold;
                var i = g.style;
                var k = g.underline;
                var t = c("#" + g.settings.id + " .cropper-bg").attr("style");
                var m = g.settings.time;
                var n = g.settings.text;
                var r = {
                    "color": o,
                    "offset": p,
                    "offsetH": l,
                    "family": s,
                    "style": i,
                    "fontSize": x,
                    "gradualHF": n,
                    "gradualHE": q,
                    "opacity": u,
                    "animal": j,
                    "bold": v,
                    "underline": k,
                    "contxt": t,
                    "time":m,
                    "text":n
                };
                var h = g.settings.uuid;
                var w = g.settings.type;
                var m = {
                    "uuid": h,
                    "type": w,
                    "data": r
                };
                g.post(m);
                ii.stopPropagation();
            });
            c(this.element).on("click", function (ii) {
                var h = this;
                c(".l-pop").each(function () {
                    if (c(this).attr("id") != c(h).next().attr("id")) {
                        c(this).css("display", "none");
                        c(this).prev().css("color", "#595957");
                        c(this).prev().css("z-index", 10)
                    }
                });
                if (c(this).next().css("display") == "none") {
                    c(this).next().css("display", "block");
                    c(this).css("z-index", 21);
                    c(this).css("color", "#ff5c54")
                } else {
                    c(this).next().css("display", "none");
                    c(this).css("z-index", 10);
                    c(this).css("color", "#595957")
                }
                ii.stopPropagation();
            });
            c("#" + g.settings.id).on("click",function (ii) {
                ii.stopPropagation();
            });

            var colorid = g.settings.id+"1";
            c("#" + colorid).on("click",function (ii) {
                ii.stopPropagation();
            });

            c(e).on("click", function (h) {
                c("#" + g.settings.id + " .l-select").each(function () {
                    c(this).find("ul").slideUp()
                });
                c(".l-pop").hide();
                c(".v_btn").css("color","rgb(89, 89, 87)");
                h.stopPropagation();
            })
        }, createBg: function () {
            var g = "<div class='p-canvas cropper-bg'></div>";
            return g
        }, createLdiv: function () {
            var g = "<div class='l-div'>";
            g += "<ul><li><div class='li-title'>字体</div>";
            g += "<div class='l-select ldw-96 mr-20'><span><i class='iconfont'>&#xe669;</i></span>";
            g += "<input type='text' readonly='readonly' value='' id='family'>";
            g += "<ul class='ldw-96'></ul></div>";
            g += "<div class='l-font'><ul><li class='lfmr-13'><input type='checkbox' name='bold'";
            g += " id='bold' >";
            g += "<i class='iconfont' before='&#xe645;' after='&#xe62c;'></i><span>B</span></li>";
            g += "<li class='lfmr-13'><input type='checkbox' name='incline' id='incline'>";
            g += "<i class='iconfont' before='&#xe645;' after='&#xe62c;'></i><span>I</span></li>";
            g += "<li><input type='checkbox' name='underline' id='underline'>";
            g += "<i class='iconfont' before='&#xe645;' after='&#xe62c;'></i><span>U</span></li></ul>";
            g += "</div></li><li><div class='li-title'>字体颜色</div><div class='l-color mr-78'></div>";
            g += "</li><li><div class='li-title'>偏移</div><div class='l-select ldw-69 mr-20'>";
            g += "<span><i class='iconfont'>&#xe669;</i></span>";
            g += "<input type='text' readonly='readonly' value=''><input type='hidden' id='offset'>";
            g += "<ul class='ldw-69'></ul></div></li>";
            g += "<li><div class='li-title'>重置</div>";
            g += "<span><i class='iconfont' id='reset'>&#xe67c;</i></span>";
            g += "</li></ul><div class='l-clear'></div></div>";
            return g
        }, createLbm: function () {
            var g = "<div class='l-bm'><ul>";
            g += "<li><span>字体大小</span><div class='l-slip'><i></i><span></span><input type='hidden' ";
            g += " name='fontSize' id='fontSize'></div></li>";
            g += "<li><span>偏移高度</span><div class='l-slip'>";
            g += "<i></i><span></span><input type='hidden' name='offsetH' id='offsetH'></div></li> ";
            g += "<li><span>高度渐变</span>";
            g += "<div class='l-slip-0'><i class='i-00'></i><i class='i-01'></i><span></span> ";
            g += "<input type='hidden' name='gradualHF' ";
            g += "  id='gradualHF'>  <input type='hidden' name='gradualHE' id='gradualHE'>";
            g += "</div></li><li><span>阴影不透明度</span>";
            g += "<div class='l-slip'><i></i><span></span> <input type='hidden' name='opacity'  ";
            g += " id='opacity'>";
            g += "</div></li>";
            g += "<li><span>动画效果</span><div class='l-select ldw-332 '>";
            g += "<span><i class='iconfont'>&#xe669;</i></span>";
            g += "<input type='text' readonly='readonly' value='' id='animal'> <input type='hidden'>";
            g += "<ul class='ldw-332'></ul></div></li>";
            g += "<li><div class='l-save'>保存</div></li></ul><div class='l-clear'></div></div>";
            return g
        }, sbustr: function (h) {
            var g = new Number(h.substr(0, h.length - 2));
            return g.valueOf()
        }, post: function (h) {
            var g = this;
            if (!g.settings.url) {
                if (g.settings.callback) {
                    g.settings.callback(h);
                    c(g.element).click();
                }
                return
            }
            console.log(h);
            c.ajax({
                url: g.settings.url,
                type: "post",
                data: h,
                datatype: "json",
                success: function (i) {
                    console.log(i);
                    if (g.settings.callback) {
                        g.settings.callback(i)
                    } else {
                        var i = JSON.parse(i);
                        if (i.result == "0") {
                            location.reload()
                        }
                    }
                }
            })
        },
    };
    c.fn[b] = function (g) {
        this.each(function () {
            if (!c.data(this, "plugin_" + b)) {
                c.data(this, "plugin_" + b, new a(this, g));
                if (!g.topPosition) {
                    g.zIndex--
                } else {
                    g.zIndex++
                }
            }
        });
        return this
    }
})(jQuery, window, document);